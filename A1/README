CONTENTS OF THIS FILE
----------------------

* Introduction
* Version Control
* Requirements
* Build & Run
* Assumptions
* Limitations
* Test Plan

INTRODUCTION
-------------

This FLEX parser parses a a file written in SGML and outputs the tags of relevancy and its' embedded contents. This progam uses a global stack and a scanner in order to perform this.

The programs takes in a file which contains SGML formatted text and parses it according to its tags. 

Relevant tags include <DOC>, <P>, <TEXT>, <DATE>, <DOCNO>, <LENGTH>, <HEADLINE> and its corresponding closing tags </DOC>, </P>, </TEXT>, <DATE>, </DOCNO>, </LENGTH> and </HEADLINE>. 

Irrelevant tags such as <SUBJECT>, <DOCID>, <BYLINE> and anything else not included in the relevant tag list.

Any embedded text between relevant tags are outputted to stdout.
Any embedded text between irrelevant tags are ignored.

These rules also apply to nested structures and will be filtered accordingly.

VERSION CONTROL
----------------

I used GitHub for my version control. 
GitHub Name: assenavmai

NOTE: The CIS4650 repository is private.

REQUIREMENTS
-------------

This program requires:

    * flex
    * g++

BUILD & RUN
--------

    1) 'cd' to the directory where the folder for this assignment exists.
    2) type 'make' and the project should build.
    3) run the program by typing './scanner < file' where file is the file that you want to be parsed


ASSUMPTIONS 
-------------

* For cases such as HYPHENATED and APOSTROPHIZED, if the token ends in "-" or "'", the trailing character will be treated as PUNCTUATION.
* Since WORD includes spaces, father-in-law -6 would count as HYPHENATED based on the regex.
* Outputting errors at the end of input: Only RELEVANT TAGS are required to be outputted.
* Assumed that the -std=c++0x flag could be used for compilation.
* Only the unmatched open tags are outputted for errors.
* Only case that needs to be checked for CLOSE-TAGS are that they do not have a corresponding open tag.
* Relevant tags can wrap irrelevant tags, but irrelevant tags cannot wrap relevant tags.
* If the global stack is empty, then nothing will be outputted since there are no tags.
* If the closing tag is unmatched, then the previous valid input will be outputted and just an error will be outputted.
    * If it is wrapped with irrelevant tags, the error will not be outputted.
* Unmatched open tags which are outputted at the end of input can include irrelevant tags


LIMITATIONS
------------
* Apostrophized cannot be combined with hyphens.
* Tags with attributes are not parsed.

TEST PLAN
-----------

Format: {Test No} [ Test Data ] => [ Expected Result ] : [ Actual Result ]  [ Pass/Fail ]

1) Testing Regular Expressions

Open tags and token sequence:

    {T1} [ < doc > ] => [ OPEN-DOC ]    :   [ OPEN-DOC ]            [Pass]
    {T2} [ <doc>  ]  => [ OPEN-DOC ]    :   [ OPEN-DOC ]            [Pass]
    {T3} [ < TeXt> ]  => [ OPEN-TEXT ]    :   [ OPEN-TEXT ]            [Pass]
    {T4} [ <P > ]  => [ OPEN-P ]    :   [ OPEN-P ]            [Pass]
    {T5} [ < doc  ]  => [ PUNCTUATION(<):   [ same as expected]     [Pass]
                          WORD(doc) ]         
    {T6} [ <h1>   ]  => [ OPEN-TAG ]    :   [ OPEN-TAG ]            [Pass]
    {T7} [<DOC align="left"] => [OPEN-DOC] : [DOCALIGNLEFT]         [Fail]

Close tags and token sequence:
    {T1} [ </ headline > ]   =>  [ CLOSE-headline ]  :   [ CLOSE-headline ] [Pass]
    {T2} [ </ doc> ]    =>  [ CLOSE-DOC ]       :   [ CLOSE-DOC ]           [Pass]
    {T3} [ < / doc > ]  =>  [ PUNCTUATION(<)    :   [ same as expected  ]   [Pass]
                              PUNCTUATION(/)
                              WORD(doc)
                              PUNCTUATION(>) ]
    {T4} [ </ h1> ]    =>    [ CLOSE-TAG ]      :   [ CLOSE-TAG ]           [Pass]

Word:
    {T1} [ Hello ]      =>  [WORD(Hello)]   :   [WORD(Hello)]      [Pass]
    {T2} [ 123abc ]     =>  [WORD(123abc)]  :   [WORD(123abc)]     [Pass]
    {T3} [hel.lo]       =>  WORD(hel)       :   same as expected   [Pass]
                            PUNCTUATION(.)
                            WORD(lo)

Number:
    {T1}    [1234]  =>  [NUMBER(1234)]  :   [NUMBER(1234)]          [Pass]
    {T2}    [45.6]  =>  [NUMBER(45.6)]  :   [NUMBER(45.6)]          [Pass]
    {T3}    [1234]  =>  [NUMBER(5) 
                         PUNCTUATION(.)]  : same as expected        [Pass]
    {T4}    [+34]   =>  [NUMBER(+34)]     : [+NUMBER(34)]           [Fail] *fixed
    {T5}    [+34.5] =>  [NUMBER(+34.5)]   : [+NUMBER(34.5)]         [Fail] *fixed
    {T6}    [-34.5] =>  [NUMBER(-34.5)]   : [PUNCTUATION(-)         [Fail] *fixed
                                             NUMBER(34.5)]
    {T7}    [-65]   =>  [NUMBER(-65)]     : PUNCTUATION(-)          [Fail] *fixed
                                            NUMBER(65)]

Apostrophized:
    {T1}  [John's]        => [APOSTROPHIZED(John's)] : [APOSTROPHIZED(John's)]              [Pass]
    {T2}  [test'this'out] => [APOSTROPHIZED(test'this'out)] : [APOSTROPHIZED(test'this'out)][Pass]
    {T3}  [test-this's]   => [APOSTROPHIZED(test-this's)] : [HYPHENATED(test-this) :        [Fail]
                                                            PUNCTUATION(')
                                                            WORD(s)]   
    {T4}  [''']           =>  [PUNCTUATION(')       :   same as expected                    [Pass]
                               PUNCTUATION(')
                               PUNCTUATION(')]                                                          
Hyphenated:
    {T1} [father-in-law]    => [HYPHENATED(father-in-law)] : [HYPHENATED(father-in-law)]    [Pass]
    {T2} [---]              => [PUNCTUATION(-) :             same as expected               [Pass]
                                PUNCTUATION(-)
                                PUNCTUATION(-)]   
    {T3} [data-base-]       =>  [HYPHENATED(data-base) :     same as expected               [Pass]
                                 PUNCTUATION(-)]

Filtering:

-------------
T1 - PASS
------------
<doc>
<p>
This should output
</p>

<subject>
<p>
This should not output
</p>
</doc>

Output:

OPEN-DOC
OPEN-P
WORD(This)
WORD(should)
WORD(output)
CLOSE-P
CLOSE-DOC

-------------
T2 - PASS
-------------

<SUBJECT>

<TEXT>

<P>

THIS WILL GET DISPLAYED

</P>

</TEXT>

<P>
THIS WON'T GET DISPLAYED

</P>

</SUBJECT>

Output:
OPEN-TEXT
OPEN-P
WORD(THIS)
WORD(WILL)
WORD(GET)
WORD(DISPLAYED)
CLOSE-P
CLOSE-TEXT

-----------
T3 - PASS
-----------
<doc>

<p>
hello
</p>

<subject>
</doc>

Output:
OPEN-DOC
OPEN-P
WORD(hello)
CLOSE-P
CLOSE-DOC


OPEN-TAG(s) which were unmatched: 
***************************************
SUBJECT 

Errors:

---------
T1 - Pass
---------

<doc>

<p>
hello
</p>

</SUBJECT> *
</doc>

Output:

OPEN-DOC
OPEN-P
WORD(hello)
CLOSE-P
CLOSE-DOC


OPEN-TAG(s) which were unmatched: 
***************************************

---------
T2 - PASS
---------
<doc>

<p>
hello
</p>

</p>
</doc>


Output:

OPEN-DOC
OPEN-P
WORD(hello)
CLOSE-P
error at line(7): no matching OPEN-TAG for </P>
CLOSE-DOC


OPEN-TAG(s) which were unmatched: 
***************************************

--------------
T3 - PASS
--------------

<doc>

<p>
hello
</p>

<headline>
<date>

</p>
</doc>

Output:

OPEN-DOC
OPEN-P
WORD(hello)
CLOSE-P
OPEN-HEADLINE
OPEN-DATE
error at line(10): no matching OPEN-TAG for </P>
CLOSE-DOC


OPEN-TAG(s) which were unmatched: 
***************************************
HEADLINE DATE 



END TEST PLAN.

