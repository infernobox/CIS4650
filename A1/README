CONTENTS OF THIS FILE
----------------------

* Introduction


INTRODUCTION
-------------

This FLEX parser parses a a file written in SGML and outputs the tags of relevancy and its' embedded contents. This progam uses a global stack and a scanner in order to perform this.

VERSION CONTROL
----------------

* I used GitHub for my version control. 
GitHub Name: assenavmai

NOTE: The CIS4650 repository is private.

REQUIREMENTS
-------------

This program requires:

	* flex
	* gcc

BUILD
--------

	1) 'cd' to the directory where the folder for this assignment exists.
	2) type 'make' and the project should build.
	3) 

TEST PLAN
-----------

This program was tested in chunks.

1) Regular expressions.
	* As the program was being built I would test the tokens created in the *.l file for correctness. I started by writing the embedded text tokens (WORD, NUMBER, APOSTROPHIZED, HYPHENATED, PUNCTUATION).
2) util.cpp
	each conditional...
3) removing one irrelevant close tag..caused output to halt. want it to continue to filter.
4) each case in checklist
5) filtering down the lisr


ASSUMPTIONS	
-------------

* For cases such as HYPHENATED and APOSTROPHIZED, if the token ends in "-" or "'", the trailing character will be treated as PUNCTUATION.
* Since WORD includes spaces, father-in-law -6 would count as HYPHENATED based on the regex.
* Outputting errors at the end of input: Only RELEVANT TAGS are required to be outputted.
* Assumed that the -std=c++0x flag could be used for compilation.
* Only the unmatched open tags are outputted for errors.
* Only case that needs to be checked for CLOSE-TAGS are that they do not have a corresponding open tag.
* Relevant tags can wrap irrelevant tags, but irrelevant tags cannot wrap relevant tags.
* If the global stack is empty, then nothing will be outputted since there are no tags.
* If the closing tag is unmatched, then the previous valid input will be outputted and just an error will be outputted.
	* If it is wrapped with irrelevant tags, the error will not be outputted.

LIMITATIONS
------------
* Parentheses and brackets are not counted as punctuation.
* <<DOC>> or anything with punctuation before the < of a tag, everything will be looked at as PUNCTUATION and WORD.
* Apostrophized cannot be combined with hyphens.
* Tags with attributes are not parsed.